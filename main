/*
Names: Bridget Naylor, Matthieu Sobol
Date: 2/1/2021
Class: CECS 277 Sec 07
Lab 2: 2D Arrays
*/ 

import java.util.Scanner;
class Main {
  /*
  @description creating a random solution board to compete against
  @param char[][] board before a ship is set
  @return char[][] board after a ship is set
  */
  public static char[][] placeShip( char[][] solutionBoard )
  {
    int shipRow = (int)(Math.random() * 4);
    int shipCol = (int)(Math.random() * 4);
    for ( int r = shipRow; r < shipRow + 2; r ++ )
    {
      for ( int c = shipCol; c < shipCol + 2; c ++  )
      {
        solutionBoard[r][c] = '*';
      }
    }
    return solutionBoard;
  }

  /**
  @description: displays the given board values
  @param char[][] board
  @return void
  */
  public static void displayBoard(char[][] board)
  {
    System.out.println("  1 2 3 4 5");
    char[] val = {'A', 'B', 'C', 'D', 'E'};
    for(int i=0; i<val.length; i++)
    {
      System.out.print(val[i] + " ");
      for(int j=0; j<board[i].length; j++)
      {
        System.out.print(board[i][j] + " ");
      }
      System.out.println();
    }
  }

  /**
  @description: prompts user to enter a row, and gets response
  @param no params
  @return int the row chosen
  */
  public static int getRow()
  {
    String row = "";
    while ( !row.equals("A") && !row.equals("B") && !row.equals("C") && !row.equals("D") && !row.equals("E"))
    {
      System.out.println("Enter a row(A-E): ");
      row = CheckInput.getString();
    }
    if ( row.equals("A") )
    {
      return 0;
    }
    else if ( row.equals("B") )
    {
      return 1;
    }
    else if ( row.equals("C") )
    {
      return 2;
    }
    else if ( row.equals("D") )
    {
      return 3;
    }
    else if (row.equals("E"))
    {
      return 4;
    }
    //error should never get here
    return -666;
  }
  /**
  @description prompts user to enter a column number between 1 and 5
  @param no parameters
  @return col - 1
  */
  public static int getCol()
  {
    System.out.println("Enter a column(1-5): ");
    int col = CheckInput.getIntRangeCol(1,5);
    return col - 1;
  }

  /**
  @description: uses the given row and col to mark a hit on the game board. The hit is a x if it misses the ship and a * if it hits
  @param char[][] solutionBoard
  @param char[][] gameBoard
  @param int row
  @param int col
  @return char[][] the game board after a shot is added
  */
  public static char[][] fireShot( char[][] solutionBoard, char[][] gameBoard, int row, int col )
  {
    if ( solutionBoard[row][col] == '*' )
    {
      gameBoard[row][col] = '*';
    }
    else
    {
      gameBoard[row][col] = 'x';
    }
    return gameBoard;
  }

  /**
  @description: prompts user to choose an option
  if user chooses 1 then plays the game
  if user choose 2 then quits
  @param no params
  @return int the user response
  */
  public static int displayMenu()
  {
    System.out.println("Menu: ");
    System.out.println("1. Fire Shot");
    System.out.println("2. Quit");
    int userGuess = CheckInput.getIntRangeMenu(1,2);
    return userGuess;
  }

  /**
  @description: resets the given 2D array to default values
  @param char[][] used board
  @return char[][] new rest board
  */
  public static char[][] resetBoard( char[][] board)
  {
    for ( int r = 0; r < 5; r++ )
    {
      for ( int c = 0; c < 5; c++ )
      {
        board[r][c] = '~';
      }
    }
    return board;
  }
  
  /**
  @description: resets the given 2D array to default values
  @param char[][] used board
  @return char[][] new rest board
  */
  public static boolean wonGame( char[][] board )
  {
    int numHits = 0;
    for ( int i = 0; i < board.length; i ++ )
    {
      for ( int j = 0; j < board.length; j ++ )
      {
        if ( board[i][j] == '*' )
        {
          numHits++;
          if ( numHits == 4 )
          {
            return true;
          }
        }
      }
    }
    return false;
  }

  public static void main(String[] args) {
    char[][] gameBoard = new char[5][5];
    char[][] solutionBoard = new char[5][5];
    gameBoard = resetBoard(gameBoard);
    solutionBoard = resetBoard(solutionBoard);
    solutionBoard = placeShip(solutionBoard);
    displayBoard(gameBoard);
    int userGuess = -666;
    boolean win = false;
    int row = 0;
    int col = 0;
    while( userGuess != 2)
    {
      userGuess = displayMenu();
      if ( userGuess == 1 )
      {
        win = false;
      }
      else if ( userGuess == 2 )
      {
        win = true;
      }
      while ( !win )
      {
        row = getRow();
        col = getCol();
        if ( gameBoard[row][col] == '*' || gameBoard[row][col]== 'x')
        {
          System.out.println("Repeat guess try something new ");
        }
        else
        {
          gameBoard = fireShot( solutionBoard, gameBoard, row, col );
          displayBoard( gameBoard );
        }
        if ( wonGame(gameBoard) )
        {
          win = true;
          System.out.println("You Won!");
          gameBoard = resetBoard(gameBoard);
          solutionBoard = resetBoard(solutionBoard);
          solutionBoard = placeShip(solutionBoard);
          displayBoard(gameBoard);
        }
      } 
    }
    System.out.println("Ok");
  }
}
